/*

 Matrix multiplication algorithm

 Algorithm for multiplying two 100x100 matrices using the standard cubic-time algorithm.
 This benchmark evaluates the performance of nested loops with a simple inner loop, which is frequent in scientific computing.

 The algorithm uses the slowest elements like math on non primitive numbers, arrays accessors and initializers.
 It's useful to have a view at the overall performance of these mechanics.
 The results are not completely accurate because they do not warm up JVM properly (it takes too much time for a simple review).

   Benchmark                                   Mode  Cnt   Score    Error  Units

   22.08.2019 (Java 8)
   MatmulPerformanceTest.benchmarkMatmulJava   thrpt    5  49,364 ± 13,306  ops/s
   MatmulPerformanceTest.benchmarkMatmulPanda  thrpt    5   2,290 ±  0,320  ops/s

   14.09.2019 (Java 8)
   MatmulPerformanceTest.benchmarkMatmulJava   thrpt    5  48,884 ± 8,513  ops/s
   MatmulPerformanceTest.benchmarkMatmulPanda  thrpt    5   2,485 ± 0,635  ops/s

   15.09.2019 (Java 8)
   MatmulPerformanceTest.benchmarkMatmulJava   thrpt    5  48,355 ± 7,385  ops/s
   MatmulPerformanceTest.benchmarkMatmulPanda  thrpt    5   3,439 ± 3,788  ops/s

   6.11.2019 (Java 8)
   MatmulPerformanceTest.benchmarkMatmulJava   thrpt    5  45,224 ± 9,899  ops/s
   MatmulPerformanceTest.benchmarkMatmulPanda  thrpt    5   5,260 ± 5,634  ops/s

*/

internal class Matmul {

    internal matgen(Int n) -> Double[][] {
        Double[][] a = new Double[n][n]
        Double tmp = 1.0 / n / n

        for (mut Int i = 0; i < n; ++i) {
            for (mut Int j = 0; j < n; ++j) {
                a[i][j] = tmp * (i - j) * (i + j)
            }
        }

        return a
    }

    internal matmul(Double[][] a, Double[][] b) -> Double[][] {
        Int m = a.size()
        Int n = a[0].size()
        Int p = b[0].size()

        Double[][] x = new Double[m][p]
        Double[][] c = new Double[p][n]

        for (mut Int i = 0; i < n; ++i) {
            for (mut Int j = 0; j < p; ++j) {
                c[j][i] = b[i][j];
            }
        }

        for (mut Int i = 0; i < m; ++i) {
            for (mut Int j = 0; j < p; ++j) {
                mut Double s = 0.0

                for (mut Int k = 0; k < n; ++k) {
                    s = s + a[i][k] * c[j][k]
                }

                x[i][j] = s
            }
        }

        return x;
    }

}

main {
    Int n = 100

    Matmul m = new Matmul()
    Double[][] a = m.matgen(n)
    Double[][] b = m.matgen(n)
    Double[][] x = m.matmul(a, b)

    Double result = x[n / 2][n / 2]
    log result

    return result
}