/*

 Matrix multiplication algorithm

 Algorithm for multiplying two 100x100 matrices using the standard cubic-time algorithm.
 This benchmark evaluates the performance of nested loops with a simple inner loop, which is frequent in scientific computing.

 The algorithm uses the the slowest structures like math on non primitive numbers, arrays accessors and initializers.
 It's useful to have a view at the overall performance of these mechanics.

 Benchmark                                      Mode  Cnt   Score    Error  Units

 - 21.08.2019 (Java 8 - primitives):
   MatmulPerformanceTest.benchmarkMatmulJava   thrpt    5  432,297 ± 20,657  ops/s
   MatmulPerformanceTest.benchmarkMatmulPanda  thrpt    5    1,562 ±  0,358  ops/s

 - 22.08.2019 (Java 8 - primitives):
   MatmulPerformanceTest.benchmarkMatmulJava   thrpt    5  532,196 ± 638,848  ops/s
   MatmulPerformanceTest.benchmarkMatmulPanda  thrpt    5    2,398 ±   0,353  ops/s

 - 22.08.2019 (Java 8):
   MatmulPerformanceTest.benchmarkMatmulJava   thrpt    5  49,364 ± 13,306  ops/s
   MatmulPerformanceTest.benchmarkMatmulPanda  thrpt    5   2,290 ±  0,320  ops/s

*/
module performance

import java.lang.System

class Matmul {

    method Double[][] matgen(Int n) {
        Double[][] a = new Double[n][n]
        Double tmp = 1.0 / n / n

        for (mut Int i = 0; i < n; ++i) {
            for (mut Int j = 0; j < n; ++j) {
                a[i][j] = tmp * (i - j) * (i + j)
            }
        }

        return a
    }

    method Double[][] matmul(Double[][] a, Double[][] b) {
        Int m = a.size()
        Int n = a[0].size()
        Int p = b[0].size()

        Double[][] x = new Double[m][p]
        Double[][] c = new Double[p][n]

        for (mut Int i = 0; i < n; ++i) {
            for (mut Int j = 0; j < p; ++j) {
                c[j][i] = b[i][j];
            }
        }

        for (mut Int i2 = 0; i2 < m; ++i2) {
            for (mut Int j2 = 0; j2 < p; ++j2) {
                mut Double s = 0.0

                for (mut Int k = 0; k < n; ++k) {
                    s = s + (a[i2][k] * c[j2][k])
                }

                x[i2][j2] = s
            }
        }

        return x;
    }

}

main {
    mut Int n = 100

    Matmul m = new Matmul()
    Double[][] a = m.matgen(n)
    Double[][] b = m.matgen(n)
    Double[][] x = m.matmul(a, b)

    System.out.println(x[n / 2][n / 2])
}