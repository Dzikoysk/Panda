module example-test

require 'current_test_required'

require java:collections // import submodules by default? :thinking:

import org.panda_lang.panda.PandaConstants

shared class Foo extends Test {

    shared static anotherEcho(String message1) {
        Console.print(message1)
    }

}

class Test {

    public Int index = 1
    shared mut Test testField
    local Double double = 1.5D

    constructor(String message2) {
        Console.print(message2)
        this.testField = this
        testField = this
        this.echo(String.valueOf(double))
        echo(this)
    }

    constructor() {
        // empty constructor
    }

    shared echo(Object message3) {
        Console.print(message3)
    }

    local testField() {
        this.echo(this.getTestField())
        return
    }

    shared Test getTestField() {
        return this.testField
    }

}

main {
    late String init
    nil Object req = null

    Test test = new Test('"Constructor"')
    test.echo("Method echo")
    Console.print(test.getTestField().testField)

    mut nil Foo varFoo = null
    varFoo = new Foo()

    mut String s = "Hello Panda v1"
    s = "Hello Panda v2"

    Int i = 0x000001
    Number math = (10.1 + (3 + 4.2 + i) * 2) - (2 / 1) /* expected: 24.5 */
    Boolean flag = i == 1

    Console.print("Hello Panda", flag, varFoo, s, test, i)
    Console.print(math)

    if (!flag) {
        Console.print("Nope")
    }
    else {
        Console.print("Yay")
    }

    List list = new ArrayList()
    list.add("val1")
    list.add("val2")

    StringBuilder builder = new StringBuilder()
    builder.append(list)

    loop (i) {
        builder.append(" Loop x1 ")

        foreach (String var : list) {
            builder.append(var)
        }

        continue
        builder.append(" Loop x3 ")
    }

    while (flag != false) {
        Console.print(builder.toString())
        break
    }

    TestArray testArray = new TestArray(7);
    testArray.modify(test)

    Console.print("Hello " + "Array " + testArray.array.toString())
    Console.print("OR v AND: " + (false || false) + ", " + false || true, true && false, true && true)
    Console.print("Compare: " + 1 > 2, 1 > 2, 1 < 2, 2 < 1)

    mut Int creaseValue = 10
    Console.print("Increase: " + creaseValue++, creaseValue++, ++creaseValue, ++creaseValue)
    Console.print("Decrease: " + creaseValue--, creaseValue--, --creaseValue, --creaseValue)

    creaseValue++
    Console.print(creaseValue)
    Console.print("Random",  (false || false) + ", " + false || true, true && false, true && true, (false || false) + ", " + false || true, true && false, true && true)

    Required required = new Required()
    required.hello()

    try {
        throw new RuntimeException("Try")
    } catch (Exception e) {
        Console.print(e.getMessage())
    }

    Console.print(PandaConstants.VERSION)

    for (mut Int index = 3; index != 0; index--) {
        if (index == 2) {
            continue
        }

        Console.print("ForI: " + index)
    }

    Console.print("Assignation: " + (Object assignation = 10))

    if (assignation is Int) {
        Int castTest = assignation as Int
        Console.print("Is int value: " + castTest)
    }
}

local class TestArray {

    shared String[] array

    constructor(Int size) {
        this.array = new String[size];
    }

    shared modify(Test test) {
        this.getArray()[test.index] = "Hello Array"
        array[6] = String.valueOf(this)

        Console.print("Value at array[test.index]: " + this.getArray()[test.index])
    }

    local String[] getArray() {
        return array
    }

}

public class Console {

    public static print(Object... values) {
        System.out.println(StringUtils.toString(values))
    }

}